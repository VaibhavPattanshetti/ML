section .data
    nline db 10,10
    nline_len equ $-nline
    space db " "
    ano db 10,"Assignment no :6",10,"---------------------------------------------",
        db 10,"Block Transfer-Non overlapped without string instructions.",
        db 10,"---------------------------------------------------",10
    ano_len equ $-ano

    bmsg db 10,"Before Transfer:"
    bmsg_len equ $-bmsg

    amsg db 10,"After Transfer:"
    amsg_len equ $-amsg

    smsg db 10,"Source Block "
    smsg_len equ $-smsg

    dmsg db 10,"Destination Block"
    dmsg_len equ $-dmsg

    sblock db 11h,22h,33h,44h,55h
    dblock times 5 db 0

section .bss
    char_ans resb 2

%macro print 2
    mov rax, 1
    mov rdi, 1
    mov rsi, %1
    mov rdx, %2
    syscall
%endmacro

%macro exit 0
    mov rax, 60
    xor rdi, rdi
    syscall
%endmacro

section .text
    global _start

_start:
    print ano, ano_len
    
    print bmsg, bmsg_len 
    print smsg, smsg_len
    mov rsi, sblock
    call disp_block

    print dmsg, dmsg_len
    mov rsi, dblock
    call disp_block

    call BT_NO
    
    print amsg, amsg_len
    print smsg, smsg_len
    mov rsi, sblock
    call disp_block

    print dmsg, dmsg_len
    mov rsi, dblock
    call disp_block

    exit

BT_NO:
    mov rsi, sblock
    mov rdi, dblock
    mov rcx, 5

back:
    mov al, [rsi]
    mov [rdi], al
    inc rsi
    inc rdi
    dec rcx
    jnz back
    ret

disp_block:
    mov rcx, 5  ; Assume block size is 5
next_num:
    mov al, [rsi]
    push rsi
    call disp_8
    print space, 1
    pop rsi
    inc rsi
    dec rcx
    jnz next_num
    ret

disp_8:
    ; Logic to convert AL to string and print it
    ; Example (to be implemented)
    ret
